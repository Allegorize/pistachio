/*
** This is the result of compiling partial.tpl except that it is pretty printed
*/

(function (data) {
  function each(a, f) {
    var i, m = [];
    for (i = 0; i < arr.length; i += 1) {
      m.push(f(a[i], i, a))
    }
    return m
  }
  function esc(t) {
    t = t + "";
    return t.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&quot;")
  }
  var memo = {};
  return (function (root, parent) {
    (function (root, grandparent) {
      var parent = this;
      var data = this;
      if ("function" === typeof data) data = data(this, root, grandparent);
      if (("undefined" === typeof data) || (data === false) || (data === null)) return "";
      if (data === true) {
        data = this;
        parent = grandparent;
      }
      if (!Array.isArray(data)) data = [data];
      if (!data.length) return "";
      return each(data, function (data) {
        (function (root, parent) {
          return 'partial.tpl\n\n' +
          (function (root, grandparent) {
            var parent = this;
            var data = this;
            if ("function" === typeof data) data = data(this, root, grandparent);
            if (("undefined" === typeof data) || (data === false) || (data === null)) return "";
            if (data === true) {
              data = this;
              parent = grandparent;
            }
            if (!Array.isArray(data)) data = [data];
            if (!data.length) return "";
            return each(data, function (data) {
              (function (root, parent) {
                return 'simple.tpl\n\n* ' + (esc(this['name'])) + '\n* ' + (esc(this['age'])) + '\n* ' + (esc(this['company'])) + '\n* ' + (this['company']) + '\n'
              }.call(data, root, parent))
            }).join("");
          }.call(this, root, parent))+
          '\n\n'+
          (function (root, grandparent) {
            var parent = this;
            var data = this;
            if ("function" === typeof data) data = data(this, root, grandparent);
            if (("undefined" === typeof data) || (data === false) || (data === null)) return "";
            if (data === true) {
              data = this;
              parent = grandparent;
            }
            if (!Array.isArray(data)) data = [data];
            if (!data.length) return "";
            return each(data, function (data) {
              (function (root, parent) {
                return 'simple.tpl\n\n* ' + (esc(this['name'])) + '\n* ' + (esc(this['age'])) + '\n* ' + (esc(this['company'])) + '\n* ' + (this['company']) + '\n'
              }.call(data, root, parent))
            }).join("");
            }.call(this, root, parent)) + '\n'
          }.call(data, root, parent))
        }).join("");
      }.call(this, root, parent))
      }.call(data, data, data))
    })
